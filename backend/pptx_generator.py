from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE
import os
import tempfile
from typing import List, Dict, Any

class PPTXGenerator:
    def __init__(self):
        self.title_font_size = Pt(44)
        self.bullet_font_size = Pt(24)
        self.title_color = RGBColor(44, 62, 80)
        self.bullet_color = RGBColor(52, 73, 94)
        self.accent_color = RGBColor(52, 152, 219)
        
    def create_presentation(self, slides_data: List[Dict[str, Any]], filename: str) -> str:
        prs = Presentation()
        
        self._apply_slide_layout(prs)
        
        for i, slide_data in enumerate(slides_data):
            if i == 0:
                slide = self._create_title_slide(prs, slide_data)
            else:
                slide = self._create_content_slide(prs, slide_data)
        
        temp_dir = tempfile.gettempdir()
        pptx_path = os.path.join(temp_dir, f"{filename}_slides.pptx")
        
        prs.save(pptx_path)
        return pptx_path
    
    def _apply_slide_layout(self, prs: Presentation):
        slide_layout = prs.slide_layouts[6]
        prs.slide_width = Inches(13.33)
        prs.slide_height = Inches(7.5)
    
    def _create_title_slide(self, prs: Presentation, slide_data: Dict[str, Any]) -> Any:
        slide_layout = prs.slide_layouts[0]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = slide_data.get("title", "Presentation Title")
        title.text_frame.paragraphs[0].font.size = Pt(48)
        title.text_frame.paragraphs[0].font.color.rgb = self.title_color
        title.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        
        subtitle = slide.placeholders[1]
        subtitle.text = "Generated by SlideSynth"
        subtitle.text_frame.paragraphs[0].font.size = Pt(18)
        subtitle.text_frame.paragraphs[0].font.color.rgb = self.accent_color
        subtitle.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        
        return slide
    
    def _create_content_slide(self, prs: Presentation, slide_data: Dict[str, Any]) -> Any:
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = slide_data.get("title", "Slide Title")
        title.text_frame.paragraphs[0].font.size = self.title_font_size
        title.text_frame.paragraphs[0].font.color.rgb = self.title_color
        
        content = slide.placeholders[1]
        content_frame = content.text_frame
        content_frame.clear()
        
        bullets = slide_data.get("bullets", [])
        for i, bullet_text in enumerate(bullets):
            if i == 0:
                p = content_frame.paragraphs[0]
            else:
                p = content_frame.add_paragraph()
            
            p.text = bullet_text
            p.font.size = self.bullet_font_size
            p.font.color.rgb = self.bullet_color
            p.level = 0
            p.space_after = Pt(12)
        
        return slide
    
    def _add_slide_number(self, slide: Any, slide_number: int, total_slides: int):
        left = Inches(11.5)
        top = Inches(6.5)
        width = Inches(1.5)
        height = Inches(0.5)
        
        txBox = slide.shapes.add_textbox(left, top, width, height)
        tf = txBox.text_frame
        tf.text = f"{slide_number}/{total_slides}"
        tf.paragraphs[0].font.size = Pt(12)
        tf.paragraphs[0].font.color.rgb = RGBColor(128, 128, 128)
        tf.paragraphs[0].alignment = PP_ALIGN.RIGHT
